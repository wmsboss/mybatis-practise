<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.apache.ibatis.submitted.rounding.Mapper">
    <select id="findActiveBlogWithTitleLike"
            resultType="Blog">
        SELECT * FROM BLOG
        WHERE state = ‘ACTIVE’
        <if test="title != null">
            AND title like #{title}
        </if>
    </select>

    <select id="findActiveBlogLike"
            resultType="Blog">
        SELECT * FROM BLOG WHERE state = ‘ACTIVE’
        <if test="title != null">
            AND title like #{title}
        </if>
        <if test="author != null and author.name != null">
            AND author_name like #{author.name}
        </if>
    </select>

    <select id="findActiveBlogLike"
            resultType="Blog">
        SELECT * FROM BLOG WHERE state = ‘ACTIVE’
        <choose>
            <when test="title != null">
                AND title like #{title}
            </when>
            <when test="author != null and author.name != null">
                AND author_name like #{author.name}
            </when>
            <otherwise>
                AND featured = 1
            </otherwise>
        </choose>
    </select>

    <select id="findActiveBlogLike"
            resultType="Blog">
        SELECT * FROM BLOG
        <!-- where 元素只会在子元素返回任何内容的情况下才插入 “WHERE” 子句。而且，若子句的开头为 “AND” 或 “OR”，where 元素也会将它们去除。-->
        <where>
            <if test="state != null">
                state = #{state}
            </if>
            <if test="title != null">
                AND title like #{title}
            </if>
            <if test="author != null and author.name != null">
                AND author_name like #{author.name}
            </if>
        </where>
<!--        <trim prefix="WHERE" prefixOverrides="AND |OR ">-->
<!--        </trim>-->
    </select>

    <update id="updateAuthorIfNecessary">
        update Author
        <!-- 这个例子中，set 元素会动态地在行首插入 SET 关键字，并会删掉额外的逗号（这些逗号是在使用条件语句给列赋值时引入的）。-->
        <set>
            <if test="username != null">username=#{username},</if>
            <if test="password != null">password=#{password},</if>
            <if test="email != null">email=#{email},</if>
            <if test="bio != null">bio=#{bio}</if>
        </set>
        where id=#{id}
<!--        <trim prefix="SET" suffixOverrides=",">-->
<!--            ...-->
<!--        </trim>-->
    </update>

    <select id="selectPostIn" resultType="domain.blog.Post">
        SELECT *
        FROM POST P
        WHERE ID in
        <foreach item="item" index="index" collection="list"
                 open="(" separator="," close=")">
            #{item}
        </foreach>
    </select>

    <!--bind 元素允许你在 OGNL 表达式以外创建一个变量，并将其绑定到当前的上下文。比如：-->
    <select id="selectBlogsLike" resultType="Blog">
        <bind name="pattern" value="'%' + _parameter.getTitle() + '%'" />
        SELECT * FROM BLOG
        WHERE title LIKE #{pattern}
    </select>

    <!-- 如果配置了 databaseIdProvider，你就可以在动态代码中使用名为 “_databaseId” 的变量来为不同的数据库构建特定的语句。比如下面的例子：-->
    <insert id="insert">
        <selectKey keyProperty="id" resultType="int" order="BEFORE">
            <if test="_databaseId == 'oracle'">
                select seq_users.nextval from dual
            </if>
            <if test="_databaseId == 'db2'">
                select nextval for seq_users from sysibm.sysdummy1"
            </if>
        </selectKey>
        insert into users values (#{id}, #{name})
    </insert>




</mapper>
